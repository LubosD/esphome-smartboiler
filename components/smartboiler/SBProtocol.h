#pragma once
#include <vector>
#include <stdint.h>
#include <string>

namespace esphome {
namespace sb {

enum SBPacket : uint16_t {
  SBC_PACKET_ANODE_PARAMS = 95,
  SBC_PACKET_ANODE_VOLTAGE = 94,
  SBC_PACKET_GLOBAL_CONFIRMUID = 51,
  SBC_PACKET_GLOBAL_DEVICEBONDED = 58,
  SBC_PACKET_GLOBAL_ERRORUID = 52,
  SBC_PACKET_GLOBAL_FIRSTLOG = 54,
  SBC_PACKET_GLOBAL_NEXTLOG = 55,
  SBC_PACKET_GLOBAL_PAIRPIN = 53,
  SBC_PACKET_GLOBAL_PINRESULT = 57,
  SBC_PACKET_GLOBAL_RESETBERR = 56,
  SBC_PACKET_GLOBAL_STARTSIMULATION = 50,
  SBC_PACKET_HDO_ALL = 26,
  SBC_PACKET_HDO_FREQUENCY = 24,
  SBC_PACKET_HDO_INFO = 34,
  SBC_PACKET_HDO_LASTHDOTIME = 32,
  SBC_PACKET_HDO_LESSEXPTARIFFAVAILABLENOW = 33,
  SBC_PACKET_HDO_MANUAL_GET = 36,
  SBC_PACKET_HDO_MANUAL_SET = 35,
  SBC_PACKET_HDO_ONOFF = 20,
  SBC_PACKET_HDO_SELECTION_A = 21,
  SBC_PACKET_HDO_SELECTION_B = 22,
  SBC_PACKET_HDO_SELECTION_DP = 23,
  SBC_PACKET_HDO_SETTING = 25,
  SBC_PACKET_HDO_SET_FREQUENCY = 31,
  SBC_PACKET_HDO_SET_ONOFF = 27,
  SBC_PACKET_HDO_SET_SELECTION_A = 28,
  SBC_PACKET_HDO_SET_SELECTION_B = 29,
  SBC_PACKET_HDO_SET_SELECTION_DP = 30,
  SBC_PACKET_HOLIDAY_DELETE = 64,
  SBC_PACKET_HOLIDAY_DISABLE = 63,
  SBC_PACKET_HOLIDAY_ENABLE = 62,
  SBC_PACKET_HOLIDAY_ENABLED = 65,
  SBC_PACKET_HOLIDAY_GET = 60,
  SBC_PACKET_HOLIDAY_SET = 61,
  SBC_PACKET_HOME_ALL = 12,
  SBC_PACKET_HOME_ANTILEGIO = 76,
  SBC_PACKET_HOME_BOILERMODEL = 2,
  SBC_PACKET_HOME_BOILERNAME = 80,
  SBC_PACKET_HOME_CAPACITY = 83,
  SBC_PACKET_HOME_ERROR = 5,
  SBC_PACKET_HOME_FWBEGIN = 86,
  SBC_PACKET_HOME_FWCHECK = 88,
  SBC_PACKET_HOME_FWCONFIRM = 87,
  SBC_PACKET_HOME_FWCOPY = 89,
  SBC_PACKET_HOME_FWRESET = 59,
  SBC_PACKET_HOME_FWVERSION = 3,
  SBC_PACKET_HOME_HSRCSTATE = 6,
  SBC_PACKET_HOME_MODE = 4,
  SBC_PACKET_HOME_NEWERR = 77,
  SBC_PACKET_HOME_SENSOR1 = 7,
  SBC_PACKET_HOME_SENSOR2 = 8,
  SBC_PACKET_HOME_SETBOILERNAME = 81,
  SBC_PACKET_HOME_SETCAPACITY = 84,
  SBC_PACKET_HOME_SETMODE = 18,
  SBC_PACKET_HOME_SETNORMALMODE = 19,
  SBC_PACKET_HOME_SETNORMALTEMPERATURE = 14,
  SBC_PACKET_HOME_SETTEMPNIGHT = 16,
  SBC_PACKET_HOME_SETTEMPNIGHTLOW = 17,
  SBC_PACKET_HOME_SETTIME = 13,
  SBC_PACKET_HOME_TEMPERATURE = 9,
  SBC_PACKET_HOME_TEMPNIGHT = 10,
  SBC_PACKET_HOME_TEMPNIGHTCURR = 82,
  SBC_PACKET_HOME_TEMPNIGHTLOW = 15,
  SBC_PACKET_HOME_TIME = 11,
  SBC_PACKET_LOG_MSG = 1,
  SBC_PACKET_NIGHT_GETDAY = 40,
  SBC_PACKET_NIGHT_GETDAYS = 44,
  SBC_PACKET_NIGHT_GETDAYS2 = 46,
  SBC_PACKET_NIGHT_SAVEDAY = 41,
  SBC_PACKET_NIGHT_SAVEDAYS = 43,
  SBC_PACKET_NIGHT_SAVEDAYS2 = 45,
  SBC_PACKET_NIGHT_SAVEMINMAX = 42,
  SBC_PACKET_NONE = 0,
  SBC_PACKET_POWERCONS_OBTAIN = 74,
  SBC_PACKET_POWERCONS_RESET = 73,
  SBC_PACKET_RQ_GLOBAL_MAC = 68,
  SBC_PACKET_RQ_UI_BUTTONDOWN = 71,
  SBC_PACKET_RQ_UI_BUTTONUP = 70,
  SBC_PACKET_RQ_UI_D7SEG = 72,
  SBC_PACKET_STATISTICS_GETALL = 93,
  SBC_PACKET_STATISTICS_RESET = 92,
  SBC_PACKET_STATISTICS_WEEK = 90,
  SBC_PACKET_STATISTICS_YEAR = 91,
};

static const char *modeStrings[] = {"STOP", "NORMAL", "HDO", "SMART", "SMARTHDO", "ANTIFROST", "NIGHT", "TEST"};

class SBProtocolRequest {
 public:
  SBProtocolRequest(SBPacket reqType) {
    this->mRqType = reqType;
    this->write_le(uint16_t(reqType));
    this->write_le(uint16_t(0));
  }
  SBProtocolRequest(SBPacket reqType, uint16_t uid) {
    this->mRqType = reqType;
    this->mUid = uid;
    this->write_le(uint16_t(reqType));
    this->write_le(uid);
  }

  void write_le(uint8_t s);
  void write_le(uint16_t s);
  void write_le(uint32_t s);
  void writeString(const std::string &s);

  std::vector<uint8_t> mData;
  SBPacket mRqType;
  uint16_t mUid = 0;
};

class SBProtocolResult {
 public:
  SBProtocolResult(const uint8_t *value, uint16_t value_len);
  SBPacket mRqType;
  uint16_t mUid = 0;
  std::vector<uint8_t> mByteData;
  std::string mString;
  uint32_t load_uint32_le(size_t position);
};

}  // namespace sb
}  // namespace esphome